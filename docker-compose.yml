x-user: &user ${NIFI_USR}
x-pwd: &pwd ${NIFI_PWD}

x-nifi-base: &nifi-base
  image: apache/nifi:2.5.0
  networks:
    - nifi

x-nifi-toolkit-base: &nifi-toolkit-base
  image: apache/nifi-toolkit:1.26.0
  networks:
    - nifi

x-nifi-environment: &nifi-environment
  NIFI_WEB_HTTPS_PORT: 8443
  NIFI_CLUSTER_IS_NODE: "true"
  NIFI_ZK_CONNECT_STRING: "zookeeper:2181"
  NIFI_ELECTION_MAX_WAIT: "30 sec"
  NIFI_ELECTION_MAX_CANDIDATES: 1
  NIFI_SENSITIVE_PROPS_KEY: "my-random-string"
  NIFI_CLUSTER_NODE_PROTOCOL_PORT: 8082
  NIFI_WEB_PROXY_HOST: "nifi0:8443,nifi0,nifi1:8443,nifi1,localhost:8080"
  SINGLE_USER_CREDENTIALS_USERNAME: *user
  SINGLE_USER_CREDENTIALS_PASSWORD: *pwd
  # NIFI_WEB_HTTPS_HOST: 0.0.0.0
  # NIFI_REMOTE_INPUT_HOST: 0.0.0.0
  NIFI_SECURITY_USER_AUTHORIZER: "single-user-authorizer"
  NIFI_SECURITY_USER_LOGIN_IDENTITY_PROVIDER: "single-user-provider"
  INITIAL_ADMIN_IDENTITY: *user
  AUTH: "tls"
  KEYSTORE_TYPE: "JKS"
  KEYSTORE_PASSWORD: supersecretkeystore
  TRUSTSTORE_TYPE: "JKS"
  TRUSTSTORE_PASSWORD: supersecrettruststore

x-nifi01-environment: &nifi01-environment
  NIFI_CLUSTER_ADDRESS: "nifi01"
  NIFI_WEB_HTTPS_HOST: "nifi01"
  KEYSTORE_PATH: "/opt/nifi/certs/keystore.jks"
  TRUSTSTORE_PATH: "/opt/nifi/certs/truststore.jks"

x-nifi02-environment: &nifi02-environment
  NIFI_CLUSTER_ADDRESS: "nifi02"
  NIFI_WEB_HTTPS_HOST: "nifi02"
  KEYSTORE_PATH: "/opt/nifi/certs/keystore.jks"
  TRUSTSTORE_PATH: "/opt/nifi/certs/truststore.jks"

services:
  zookeeper:
    container_name: zookeeper
    image: bitnami/zookeeper:3.9.0
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - nifi

  proxy:
    image: nginx:latest
    container_name: proxy
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8443:8443"
    networks:
      - nifi
    depends_on:
      - nifi01
      # - nifi02

  nifi-toolkit:
    <<: *nifi-toolkit-base
    container_name: nifi-toolkit
    volumes:
      - ./nifi/certs:/opt/certs
    user: root
    entrypoint: ["bash", "-c", "/opt/nifi-toolkit/*/bin/tls-toolkit.sh standalone -O --subjectAlternativeNames 'nifi01,nifi02,localhost' -o /opt/certs -n nifi0[1-2] -P supersecrettruststore -K supersecretkeystore -S supersecretkeystore; chown -R nifi:nifi /opt/certs"]

  nifi01:
    <<: *nifi-base
    container_name: nifi01
    restart: on-failure
    depends_on:
      # - zookeeper
      nifi-toolkit:
        condition: service_completed_successfully
    # ports:
    #   - "8443:8443"
    environment:
      <<: [*nifi-environment, *nifi01-environment]
    # entrypoint: ["/entrypoint.sh"]
    networks:
      - nifi
    volumes:
      - ./nifi/libs:/opt/nifi/nifi-current/libs:ro
      - nifi_certs_01:/opt/nifi/certs
      - nifi_data_01_conf:/opt/nifi/nifi-current/conf
      - nifi_data_01_extensions:/opt/nifi/nifi-current/extensions
      - nifi_data_01_database_repository:/opt/nifi/nifi-current/database_repository
      - nifi_data_01_flowfile_repository:/opt/nifi/nifi-current/flowfile_repository
      - nifi_data_01_content_repository:/opt/nifi/nifi-current/content_repository
      - nifi_data_01_provenance_repository:/opt/nifi/nifi-current/provenance_repository
      - nifi_data_01_state:/opt/nifi/nifi-current/state
      - nifi_data_01_logs:/opt/nifi/nifi-current/logs
    # secrets:
    #   - nifi_secret

  nifi02:
    <<: *nifi-base
    container_name: nifi02
    restart: on-failure
    depends_on:
      # - zookeeper
      nifi-toolkit:
        condition: service_completed_successfully
    # ports:
    #   - "8443:8443"
    environment:
      <<: [*nifi-environment, *nifi02-environment]
    # entrypoint: ["/entrypoint.sh"]
    networks:
      - nifi
    volumes:
      - ./nifi/libs:/opt/nifi/nifi-current/libs:ro
      - nifi_certs_02:/opt/nifi/certs
      - nifi_data_02_conf:/opt/nifi/nifi-current/conf
      - nifi_data_02_extensions:/opt/nifi/nifi-current/extensions
      - nifi_data_02_database_repository:/opt/nifi/nifi-current/database_repository
      - nifi_data_02_flowfile_repository:/opt/nifi/nifi-current/flowfile_repository
      - nifi_data_02_content_repository:/opt/nifi/nifi-current/content_repository
      - nifi_data_02_provenance_repository:/opt/nifi/nifi-current/provenance_repository
      - nifi_data_02_state:/opt/nifi/nifi-current/state
      - nifi_data_02_logs:/opt/nifi/nifi-current/logs
    # secrets:
    #   - nifi_secret

  postgres.persistence:
    image: postgres:latest
    restart: always
    mem_limit: 512m
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=sdot_db
      - POSTGRES_USER=${POSTGRES_USR}
      - POSTGRES_PASSWORD=${POSTGRES_PWD}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USR}"]
      interval: 5s
      timeout: 2s
      retries: 60
    networks:
      - nifi
    volumes:
      - ./postgresql/initdb:/docker-entrypoint-initdb.d
      - ./postgresql/data:/var/lib/postgresql/data

networks:
  nifi:
    driver: bridge

volumes:
  nifi_certs_01:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: nifi/certs/nifi01
  nifi_data_01_conf:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: nifi/data/01/conf
  nifi_data_01_extensions:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: nifi/data/01/extensions
  nifi_data_01_database_repository:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: nifi/data/01/database_repository
  nifi_data_01_flowfile_repository:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: nifi/data/01/flowfile_repository
  nifi_data_01_content_repository:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: nifi/data/01/content_repository
  nifi_data_01_provenance_repository:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: nifi/data/01/provenance_repository
  nifi_data_01_state:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: nifi/data/01/state
  nifi_data_01_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: nifi/data/01/logs

  nifi_certs_02:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: nifi/certs/nifi02
  nifi_data_02_conf:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: nifi/data/02/conf
  nifi_data_02_extensions:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: nifi/data/02/extensions
  nifi_data_02_database_repository:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: nifi/data/02/database_repository
  nifi_data_02_flowfile_repository:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: nifi/data/02/flowfile_repository
  nifi_data_02_content_repository:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: nifi/data/02/content_repository
  nifi_data_02_provenance_repository:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: nifi/data/02/provenance_repository
  nifi_data_02_state:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: nifi/data/02/state
  nifi_data_02_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: nifi/data/02/logs